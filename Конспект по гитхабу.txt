ЕСЛИ ОЧЕНЬ КРАТКО:
PR/MR – для код-ревью и слияния веток.
Cherry-pick – точечное применение коммита.
Revert – безопасная отмена изменений.
Reset – локальная отмена коммитов (только для своих веток).
git push - Отправляет локальные изменения в удалённый репозиторий (например, на GitHub).
git pull - Забирает изменения из удалённого репозитория и автоматически сливает (merge) их с текущей локальной веткой.
git fetch - Загружает изменения из удалённого репозитория, но НЕ сливает их с локальными файлами.
git commit - Фиксирует изменения в локальном репозитории (создаёт "снимок" текущего состояния).
git checkout - Переключается между ветками или восстанавливает файлы из истории.
ПОДРОБНЕЕ:
1. Организация веток (Branches)
Ветка (Branch) – изолированная версия кода, позволяющая работать над фичами, не затрагивая основной код (main/master).
Основные ветки:
main/master – стабильная версия проекта.
develop (опционально) – ветка для разработки.
Фиче-ветки (feature branches) – создаются для новых задач, затем сливаются через PR/MR.


2. Pull Request (PR) / Merge Request (MR)
PR (GitHub) / MR (GitLab) – запрос на слияние изменений из одной ветки в другую.
Процесс:
1)Создается из фиче-ветки в main/develop.
2)Проводится код-ревью, обсуждение.
3)После апрува – мержится.
Возможности:
Автоматические проверки (CI/CD).
Squash-мерж (объединение коммитов).


3. Merge (Слияние)
Типы Мержа:
Merge Commit – создает новый коммит слияния.
Rebase and Merge – перебазирует коммиты на целевую ветку.
Squash and Merge – объединяет все коммиты PR в один.

4.Cherry-pick
Перенос конкретного коммита из одной ветки в другую.
//////////////////////////////
bash
git cherry-pick <commit-hash>
//////////////////////////////
Исправляет баги в нескольких ветках без полного мержа.

5.Revert
Отмена изменений конкретного коммита, создавая новый коммит с обратными изменениями.
///////////////////////////
bash
git revert <commit-hash>
///////////////////////////

6. Reset
Откат истории коммитов (опасно для shared-репозиториев).

